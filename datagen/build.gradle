plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}
fabricApi {
    configureDataGeneration {
        client = true
        modId = "${rootProject.name}"
        //settings.getOutputDirectory().set(getProject().file("src/main/generated"));
        outputDirectory=file(rootProject.findProject("common").getProjectDir().path+"/src/main/generated/")
        mkdir(getOutputDirectory())

    }
}
loom {
    getRuns().removeIf {settings->
        return !settings.getName().equals("datagen")
    }
    runs."datagen".makeRunDir()
}
dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    implementation(project(path: ':common', configuration: 'namedElements')) {
        transitive = false
    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

